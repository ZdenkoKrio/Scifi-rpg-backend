# Generated by Django 5.1.5 on 2025-02-04 11:39

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        ('diplomation', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Nebula',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('coordinates_x', models.IntegerField()),
                ('coordinates_y', models.IntegerField()),
                ('coordinates_z', models.IntegerField()),
                ('gas_composition', models.CharField(choices=[('hydrogen', 'Hydrogen-Rich'), ('ionized', 'Ionized Plasma'), ('radioactive', 'Radioactive'), ('unknown', 'Unknown Composition')], default='unknown', max_length=20)),
                ('visibility', models.IntegerField(default=50, help_text='0 = completely opaque, 100 = fully visible', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('has_storms', models.BooleanField(default=False, help_text='If true, traveling through is dangerous.')),
            ],
        ),
        migrations.CreateModel(
            name='Planet',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('size', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10000)])),
                ('composition', models.CharField(choices=[('rocky', 'Rocky'), ('gaseous', 'Gaseous'), ('metallic', 'Metallic'), ('ice', 'Icy'), ('unknown', 'Unknown')], default='unknown', max_length=20)),
                ('resource_richness', models.IntegerField(default=0, help_text='Resource value (0 = barren, 100 = rich)', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('atmosphere_type', models.CharField(choices=[('breathable', 'Breathable'), ('toxic', 'Toxic'), ('none', 'No Atmosphere')], default='none', max_length=20)),
                ('population', models.BigIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('economy_type', models.CharField(blank=True, choices=[('trade_hub', 'Trade Hub'), ('industrial', 'Industrial'), ('agriculture', 'Agriculture'), ('military', 'Military Base')], max_length=20, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Moon',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('size', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10000)])),
                ('composition', models.CharField(choices=[('rocky', 'Rocky'), ('gaseous', 'Gaseous'), ('metallic', 'Metallic'), ('ice', 'Icy'), ('unknown', 'Unknown')], default='unknown', max_length=20)),
                ('resource_richness', models.IntegerField(default=0, help_text='Resource value (0 = barren, 100 = rich)', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('atmosphere_type', models.CharField(choices=[('breathable', 'Breathable'), ('toxic', 'Toxic'), ('none', 'No Atmosphere')], default='none', max_length=20)),
                ('has_mining_colony', models.BooleanField(default=False)),
                ('has_military_base', models.BooleanField(default=False)),
                ('population', models.IntegerField(default=0)),
                ('planet', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='moons', to='space.planet')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='StarSystem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('coordinates_x', models.FloatField()),
                ('coordinates_y', models.FloatField()),
                ('coordinates_z', models.FloatField()),
                ('faction', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='systems', to='diplomation.faction')),
            ],
        ),
        migrations.CreateModel(
            name='Star',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('composition', models.CharField(choices=[('rocky', 'Rocky'), ('gaseous', 'Gaseous'), ('metallic', 'Metallic'), ('ice', 'Icy'), ('unknown', 'Unknown')], default='unknown', max_length=20)),
                ('resource_richness', models.IntegerField(default=0, help_text='Resource value (0 = barren, 100 = rich)', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('star_type', models.CharField(choices=[('main_sequence', 'Main Sequence'), ('red_giant', 'Red Giant'), ('white_dwarf', 'White Dwarf'), ('neutron', 'Neutron Star'), ('black_hole', 'Black Hole')], default='main_sequence', max_length=50)),
                ('temperature', models.IntegerField(help_text='Temperature in Kelvin', validators=[django.core.validators.MinValueValidator(1000), django.core.validators.MaxValueValidator(50000)])),
                ('size', models.IntegerField(help_text='Relative size metric', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10000)])),
                ('luminosity', models.FloatField(help_text='Sun = 1.0', validators=[django.core.validators.MinValueValidator(0.1), django.core.validators.MaxValueValidator(1000.0)])),
                ('star_system', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='star', to='space.starsystem')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SpaceStation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('station_type', models.CharField(choices=[('trading', 'Trading Station'), ('military', 'Military Base'), ('research', 'Research Facility'), ('free_floating', 'Independent Station')], default='trading', max_length=20)),
                ('orbiting_object_id', models.PositiveIntegerField(blank=True, null=True)),
                ('orbiting_content_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='contenttypes.contenttype')),
                ('owner_faction', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='diplomation.faction')),
                ('star_system', models.ForeignKey(blank=True, help_text='The star system this station is located in (if any).', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='stations', to='space.starsystem')),
            ],
        ),
        migrations.AddField(
            model_name='planet',
            name='star_system',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='planets', to='space.starsystem'),
        ),
        migrations.CreateModel(
            name='Asteroid',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('size', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10000)])),
                ('composition', models.CharField(choices=[('rocky', 'Rocky'), ('gaseous', 'Gaseous'), ('metallic', 'Metallic'), ('ice', 'Icy'), ('unknown', 'Unknown')], default='unknown', max_length=20)),
                ('resource_richness', models.IntegerField(default=0, help_text='Resource value (0 = barren, 100 = rich)', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('is_mining_site', models.BooleanField(default=False)),
                ('has_pirate_activity', models.BooleanField(default=False)),
                ('star_system', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='asteroids', to='space.starsystem')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='UnknownObject',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('size', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10000)])),
                ('composition', models.CharField(choices=[('rocky', 'Rocky'), ('gaseous', 'Gaseous'), ('metallic', 'Metallic'), ('ice', 'Icy'), ('unknown', 'Unknown')], default='unknown', max_length=20)),
                ('resource_richness', models.IntegerField(default=0, help_text='Resource value (0 = barren, 100 = rich)', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('object_type', models.CharField(choices=[('black_hole', 'Black Hole'), ('anomaly', 'Anomaly'), ('derelict_station', 'Derelict Station'), ('alien_artifact', 'Alien Artifact'), ('wormhole', 'Wormhole')], default='anomaly', max_length=50)),
                ('coordinates_x', models.FloatField(blank=True, help_text='X position in the galaxy (if outside a system).', null=True)),
                ('coordinates_y', models.FloatField(blank=True, help_text='Y position in the galaxy (if outside a system).', null=True)),
                ('coordinates_z', models.FloatField(blank=True, help_text='Z position in the galaxy (if outside a system).', null=True)),
                ('danger_level', models.IntegerField(default=0, help_text='0 = safe, 100 = extreme danger', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('scientific_value', models.IntegerField(default=50, help_text='Worth for research (0-100)', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('can_interact', models.BooleanField(default=True, help_text='Can players interact with it?')),
                ('star_system', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='unknown_objects', to='space.starsystem')),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
